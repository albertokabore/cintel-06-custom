[{"name": "app.py", "content": "from shiny.express import input, render, ui\nfrom shiny import reactive, App\nimport pandas as pd\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nfrom shinywidgets import output_widget, render_widget\nimport faicons\nimport ridgeplot\n\n# Load dataset\nDATA_PATH = Path(__file__).parent / \"GHW_HeartFailure_Readmission_Combined.csv\"\ndf = pd.read_csv(DATA_PATH)\n\n# Define UI\ndf_columns = df.columns.tolist()\n\nui.page_opts(title=\"Heart Failure Readmission Dashboard\", fillable=True)\n\nwith ui.sidebar():\n    ui.input_select(\"readmit_filter\", \"Filter by Readmission (30/60 Days)\",\n                    choices=[\"All\", \"0\", \"1\"], selected=\"All\")\n    ui.input_select(\"chart_x\", \"Select X-axis for Chart\", choices=df_columns, selected=\"Age\")\n    ui.input_select(\"chart_y\", \"Select Y-axis for Chart\", choices=df_columns, selected=\"NT_proBNP\")\n    ui.input_slider(\"num_rows\", \"Number of Rows in Data Grid\", min=5, max=50, value=20)\n\n# Reactive filter based on user selection\n@reactive.calc\ndef filtered_data():\n    if input.readmit_filter() == \"All\":\n        return df\n    else:\n        return df[df[\"Readmission_30or60Days\"] == int(input.readmit_filter())]\n\n# Main layout\nwith ui.layout_columns():\n    ui.value_box(\"Total Patients\", df.shape[0], showcase=faicons.icon_svg(\"users\"))\n    ui.value_box(\"Unique Readmissions\", df[df[\"Readmission_30or60Days\"] == 1].shape[0], showcase=faicons.icon_svg(\"heartbeat\"))\n\nwith ui.card(full_screen=True):\n    ui.card_header(\"Patient Data Grid\")\n    @render.data_frame\n    def data_table():\n        return filtered_data().head(input.num_rows())\n\nwith ui.card():\n    ui.card_header(\"Readmission Scatter Plot\")\n    @render.plotly\n    def plot():\n        return px.scatter(filtered_data(), x=input.chart_x(), y=input.chart_y(), color=\"Readmission_30or60Days\",\n                          title=\"Scatter Plot by Selected Axes\")\n\nwith ui.card():\n    ui.card_header(\"Readmission Ridge Plot\")\n    @render_widget\n    def ridge():\n        fig = ridgeplot.ridgeplot(\n            data=filtered_data(),\n            x=input.chart_x(),\n            y=\"Readmission_30or60Days\",\n            title=f\"Distribution of {input.chart_x()} by Readmission\"\n        )\n        return fig\n\n# Define App\napp = App(ui, server=None)\n", "type": "text"}]